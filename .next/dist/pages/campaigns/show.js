'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require('../../components/ContributeForm');

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\workspaces12\\kickstarter-blockchain-exam\\pages\\campaigns\\show.js?entry';


var CampaignShow = function (_Component) {
    (0, _inherits3.default)(CampaignShow, _Component);

    function CampaignShow() {
        (0, _classCallCheck3.default)(this, CampaignShow);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignShow, [{
        key: 'renderCards',
        value: function renderCards() {
            var _props = this.props,
                balance = _props.balance,
                manager = _props.manager,
                minimumContribution = _props.minimumContribution,
                requestsCount = _props.requestsCount,
                approversCount = _props.approversCount;

            var items = [{
                header: manager,
                meta: 'Address of Manager',
                description: 'The manager created this campaign and can create request to campaign',
                style: { overflowWrap: 'break-word' }
            }, {
                header: minimumContribution,
                meta: 'Minimum Contribution (wei) ',
                description: 'You must contribute at least this much wei to become an approver'
            }, {
                header: requestsCount,
                meta: 'Number of Requests',
                description: 'A request tries to withdraw money'
            }, {
                header: approversCount,
                meta: 'approversCount ',
                description: 'approversCount'
            }, {
                header: _web2.default.utils.fromWei(balance, 'ether'),
                meta: 'Campaign balance(ether)',
                description: 'The balance is how much money this campaign'
            }];

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 63
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 68
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 69
                }
            }, 'Campaign Show'), _react2.default.createElement(_semanticUiReact.Grid, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 72
                }
            }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 75
                }
            }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 79
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                }
            }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 81
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 82
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 83
                }
            }, 'View Request')))))));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var campaign, summary;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                campaign = (0, _campaign2.default)(props.query.address);
                                _context.next = 3;
                                return campaign.methods.getSummary().call();

                            case 3:
                                summary = _context.sent;
                                return _context.abrupt('return', {
                                    address: props.query.address,
                                    minimumContribution: summary[0],
                                    balance: summary[1],
                                    requestsCount: summary[2],
                                    approversCount: summary[3],
                                    manager: summary[4]
                                });

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl9wcm9wcyIsInByb3BzIiwiYmFsYW5jZSIsIm1hbmFnZXIiLCJtaW5pbXVtQ29udHJpYnV0aW9uIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwiaXRlbXMiLCJoZWFkZXIiLCJtZXRhIiwiZGVzY3JpcHRpb24iLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwicm91dGUiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLGdGQUFuQjs7O0FBU0EsSUFBSUMsZUFBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3JDLDRCQUFVRCxZQUFWLEVBQXdCQyxVQUF4Qjs7QUFFQSxhQUFTRCxZQUFULEdBQXdCO0FBQ3BCLHNDQUFnQixJQUFoQixFQUFzQkEsWUFBdEI7O0FBRUEsZUFBTyx5Q0FBMkIs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LEtBQU4sQ0FBWWIsT0FBckIsQ0FBWDtBQUNBVSx5Q0FBU0UsSUFBVCxHQUFnQixDQUFoQjtBQUNBLHVDQUFPTixTQUFTUSxPQUFULENBQWlCQyxVQUFqQixHQUE4QkMsSUFBOUIsRUFBUDs7QUFFSixpQ0FBSyxDQUFMO0FBQ0lULDBDQUFVRyxTQUFTTyxJQUFuQjtBQUNBLHVDQUFPUCxTQUFTUSxNQUFULENBQWdCLFFBQWhCLEVBQTBCO0FBQzdCbEIsNkNBQVN2QixNQUFNb0MsS0FBTixDQUFZYixPQURRO0FBRTdCcEIseURBQXFCMkIsUUFBUSxDQUFSLENBRlE7QUFHN0I3Qiw2Q0FBUzZCLFFBQVEsQ0FBUixDQUhvQjtBQUk3QjFCLG1EQUFlMEIsUUFBUSxDQUFSLENBSmM7QUFLN0J6QixvREFBZ0J5QixRQUFRLENBQVIsQ0FMYTtBQU03QjVCLDZDQUFTNEIsUUFBUSxDQUFSO0FBTm9CLGlDQUExQixDQUFQOztBQVNKLGlDQUFLLENBQUw7QUFDQSxpQ0FBSyxLQUFMO0FBQ0ksdUNBQU9HLFNBQVNTLElBQVQsRUFBUDtBQW5CUjtBQXFCSDtBQUNKLGlCQXhCTSxFQXdCSmQsT0F4QkksRUF3QkssSUF4QkwsQ0FBUDtBQXlCSCxhQTNCMEMsQ0FBaEMsQ0FBWDs7QUE2QkEscUJBQVNlLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCO0FBQ3pCLHVCQUFPbEIsS0FBS2hDLEtBQUwsQ0FBVyxJQUFYLEVBQWlCQyxTQUFqQixDQUFQO0FBQ0g7O0FBRUQsbUJBQU9nRCxlQUFQO0FBQ0gsU0FuQ007QUFGTixLQUFELENBbkpKOztBQTJMQSxXQUFPcEQsWUFBUDtBQUNILENBck1rQixrQkFBbkI7O2tCQXVNZUEsWSIsImZpbGUiOiJ1bmtub3duIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcic7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InO1xuaW1wb3J0IF9PYmplY3QkZ2V0UHJvdG90eXBlT2YgZnJvbSAnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG52YXIgX2pzeEZpbGVOYW1lID0gJ0U6XFxcXHdvcmtzcGFjZXMxMlxcXFxraWNrc3RhcnRlci1ibG9ja2NoYWluLWV4YW1cXFxccGFnZXNcXFxcY2FtcGFpZ25zXFxcXHNob3cuanM/ZW50cnknO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENhcmQsIEdyaWQsIEJ1dHRvbiB9IGZyb20gJ3NlbWFudGljLXVpLXJlYWN0JztcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9MYXlvdXQnO1xuaW1wb3J0IENhbXBhaWduIGZyb20gJy4uLy4uL2V0aGVyZXVtL2NhbXBhaWduJztcbmltcG9ydCB3ZWIzIGZyb20gJy4uLy4uL2V0aGVyZXVtL3dlYjMnO1xuaW1wb3J0IENvbnRyaWJ1dGVGb3JtIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQ29udHJpYnV0ZUZvcm0nO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJy4uLy4uL3JvdXRlcyc7XG5cbnZhciBDYW1wYWlnblNob3cgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhDYW1wYWlnblNob3csIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQ2FtcGFpZ25TaG93KCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FtcGFpZ25TaG93KTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENhbXBhaWduU2hvdy5fX3Byb3RvX18gfHwgX09iamVjdCRnZXRQcm90b3R5cGVPZihDYW1wYWlnblNob3cpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2FtcGFpZ25TaG93LCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXJDYXJkcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDYXJkcygpIHtcbiAgICAgICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIGJhbGFuY2UgPSBfcHJvcHMuYmFsYW5jZSxcbiAgICAgICAgICAgICAgICBtYW5hZ2VyID0gX3Byb3BzLm1hbmFnZXIsXG4gICAgICAgICAgICAgICAgbWluaW11bUNvbnRyaWJ1dGlvbiA9IF9wcm9wcy5taW5pbXVtQ29udHJpYnV0aW9uLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RzQ291bnQgPSBfcHJvcHMucmVxdWVzdHNDb3VudCxcbiAgICAgICAgICAgICAgICBhcHByb3ZlcnNDb3VudCA9IF9wcm9wcy5hcHByb3ZlcnNDb3VudDtcblxuXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBbe1xuICAgICAgICAgICAgICAgIGhlYWRlcjogbWFuYWdlcixcbiAgICAgICAgICAgICAgICBtZXRhOiAnQWRkcmVzcyBvZiBNYW5hZ2VyJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBtYW5hZ2VyIGNyZWF0ZWQgdGhpcyBjYW1wYWlnbiBhbmQgY2FuIGNyZWF0ZSByZXF1ZXN0IHRvIGNhbXBhaWduJyxcbiAgICAgICAgICAgICAgICBzdHlsZTogeyBvdmVyZmxvd1dyYXA6ICdicmVhay13b3JkJyB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyOiBtaW5pbXVtQ29udHJpYnV0aW9uLFxuICAgICAgICAgICAgICAgIG1ldGE6ICdNaW5pbXVtIENvbnRyaWJ1dGlvbiAod2VpKSAnLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnWW91IG11c3QgY29udHJpYnV0ZSBhdCBsZWFzdCB0aGlzIG11Y2ggd2VpIHRvIGJlY29tZSBhbiBhcHByb3ZlcidcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBoZWFkZXI6IHJlcXVlc3RzQ291bnQsXG4gICAgICAgICAgICAgICAgbWV0YTogJ051bWJlciBvZiBSZXF1ZXN0cycsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBIHJlcXVlc3QgdHJpZXMgdG8gd2l0aGRyYXcgbW9uZXknXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyOiBhcHByb3ZlcnNDb3VudCxcbiAgICAgICAgICAgICAgICBtZXRhOiAnYXBwcm92ZXJzQ291bnQgJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ2FwcHJvdmVyc0NvdW50J1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGhlYWRlcjogd2ViMy51dGlscy5mcm9tV2VpKGJhbGFuY2UsICdldGhlcicpLFxuICAgICAgICAgICAgICAgIG1ldGE6ICdDYW1wYWlnbiBiYWxhbmNlKGV0aGVyKScsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgYmFsYW5jZSBpcyBob3cgbXVjaCBtb25leSB0aGlzIGNhbXBhaWduJ1xuICAgICAgICAgICAgfV07XG5cbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmQuR3JvdXAsIHsgaXRlbXM6IGl0ZW1zLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA2M1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgTGF5b3V0LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA2OFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnaDMnLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNjlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ0NhbXBhaWduIFNob3cnXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBHcmlkLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNzBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIEdyaWQuUm93LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDcxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JpZC5Db2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB3aWR0aDogMTAsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNzJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJDYXJkcygpXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmlkLkNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHdpZHRoOiA2LCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDc1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udHJpYnV0ZUZvcm0sIHsgYWRkcmVzczogdGhpcy5wcm9wcy5hZGRyZXNzLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDc2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgR3JpZC5Sb3csXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNzlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmlkLkNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogODBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGluayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByb3V0ZTogJy9jYW1wYWlnbnMvJyArIHRoaXMucHJvcHMuYWRkcmVzcyArICcvcmVxdWVzdHMnLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogODFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA4MlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHByaW1hcnk6IHRydWUsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogODNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1ZpZXcgUmVxdWVzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShwcm9wcykge1xuICAgICAgICAgICAgICAgIHZhciBjYW1wYWlnbiwgc3VtbWFyeTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW1wYWlnbiA9IENhbXBhaWduKHByb3BzLnF1ZXJ5LmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbXBhaWduLm1ldGhvZHMuZ2V0U3VtbWFyeSgpLmNhbGwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtbWFyeSA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHByb3BzLnF1ZXJ5LmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtQ29udHJpYnV0aW9uOiBzdW1tYXJ5WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZTogc3VtbWFyeVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzQ291bnQ6IHN1bW1hcnlbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHByb3ZlcnNDb3VudDogc3VtbWFyeVszXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZXI6IHN1bW1hcnlbNF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRJbml0aWFsUHJvcHMoX3gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZ2V0SW5pdGlhbFByb3BzO1xuICAgICAgICB9KClcbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ2FtcGFpZ25TaG93O1xufShDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBDYW1wYWlnblNob3c7Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl9wcm9wcyIsInByb3BzIiwiYmFsYW5jZSIsIm1hbmFnZXIiLCJtaW5pbXVtQ29udHJpYnV0aW9uIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwiaXRlbXMiLCJoZWFkZXIiLCJtZXRhIiwiZGVzY3JpcHRpb24iLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwicm91dGUiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLGdGQUFuQjs7O0FBU0EsSUFBSUMsZUFBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3JDLDRCQUFVRCxZQUFWLEVBQXdCQyxVQUF4Qjs7QUFFQSxhQUFTRCxZQUFULEdBQXdCO0FBQ3BCLHNDQUFnQixJQUFoQixFQUFzQkEsWUFBdEI7O0FBRUEsZUFBTyx5Q0FBMkIs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