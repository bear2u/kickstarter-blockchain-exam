'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\workspaces12\\kickstarter-blockchain-exam\\components\\RequestRow.js';


var RequestRow = function (_Component) {
    (0, _inherits3.default)(RequestRow, _Component);

    function RequestRow() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, RequestRow);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RequestRow.__proto__ || (0, _getPrototypeOf2.default)(RequestRow)).call.apply(_ref, [this].concat(args))), _this), _this.onApprove = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var campaign, accounts;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            campaign = (0, _campaign2.default)(_this.props.address);
                            _context.next = 3;
                            return _web2.default.eth.getAccounts();

                        case 3:
                            accounts = _context.sent;
                            _context.next = 6;
                            return campaign.methods.approveRequest(_this.props.id).send({
                                from: accounts[0]
                            });

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this2);
        })), _this.onFinialize = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var campaign, accounts;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            campaign = (0, _campaign2.default)(_this.props.address);
                            _context2.next = 3;
                            return _web2.default.eth.getAccounts();

                        case 3:
                            accounts = _context2.sent;
                            _context2.next = 6;
                            return campaign.methods.finalizeRequest(_this.props.id).send({
                                from: accounts[0]
                            });

                        case 6:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, _this2);
        })), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(RequestRow, [{
        key: 'render',
        value: function render() {
            var Row = _semanticUiReact.Table.Row,
                Cell = _semanticUiReact.Table.Cell;
            var _props = this.props,
                id = _props.id,
                request = _props.request,
                approversCount = _props.approversCount;

            var readyToFinalize = request.approvalCount > approversCount / 2;

            return _react2.default.createElement(Row, { disabled: request.complete, positive: readyToFinalize && !request.complete, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 31
                }
            }, _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 32
                }
            }, id), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 33
                }
            }, request.description), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                }
            }, _web2.default.utils.fromWei(request.value, 'ether')), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 35
                }
            }, request.recipient), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 36
                }
            }, request.approvalCount, ' / ', approversCount), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                }
            }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, onClick: this.onApprove, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, 'Approve')), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 44
                }
            }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'teal', basic: true, onClick: this.onFinialize, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }, 'Finalize')));
        }
    }]);

    return RequestRow;
}(_react.Component);

exports.default = RequestRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdFJvdyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsIm9uQXBwcm92ZSIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcm9wcyIsImFkZHJlc3MiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiYXBwcm92ZVJlcXVlc3QiLCJpZCIsInNlbmQiLCJmcm9tIiwic3RvcCIsIm9uRmluaWFsaXplIiwiX2NhbGxlZTIiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJmaW5hbGl6ZVJlcXVlc3QiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsIlJvdyIsIkNlbGwiLCJfcHJvcHMiLCJyZXF1ZXN0IiwiYXBwcm92ZXJzQ291bnQiLCJyZWFkeVRvRmluYWxpemUiLCJhcHByb3ZhbENvdW50IiwiY3JlYXRlRWxlbWVudCIsImRpc2FibGVkIiwiY29tcGxldGUiLCJwb3NpdGl2ZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZGVzY3JpcHRpb24iLCJ1dGlscyIsImZyb21XZWkiLCJyZWNpcGllbnQiLCJjb2xvciIsImJhc2ljIiwib25DbGljayJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUpBLElBQUlBLGVBQWUsMEVBQW5COzs7QUFNQSxJQUFJQyxhQUFhLFVBQVVDLFVBQVYsRUFBc0I7QUFDbkMsNEJBQVVELFVBQVYsRUFBc0JDLFVBQXRCOztBQUVBLGFBQVNELFVBQVQsR0FBc0I7QUFDbEIsWUFBSUUsSUFBSjtBQUFBLFlBQ0lDLFNBQVMsSUFEYjs7QUFHQSxZQUFJQyxLQUFKLEVBQVdDLEtBQVgsRUFBa0JDLElBQWxCOztBQUVBLHNDQUFnQixJQUFoQixFQUFzQk4sVUFBdEI7O0FBRUEsYUFBSyxJQUFJTyxPQUFPQyxVQUFVQyxNQUFyQixFQUE2QkMsT0FBT0MsTUFBTUosSUFBTixDQUFwQyxFQUFpREssT0FBTyxDQUE3RCxFQUFnRUEsT0FBT0wsSUFBdkUsRUFBNkVLLE1BQTdFLEVBQXFGO0FBQ2pGRixpQkFBS0UsSUFBTCxJQUFhSixVQUFVSSxJQUFWLENBQWI7QUFDSDs7QUFFRCxlQUFPTixRQUFRRixTQUFTQyxRQUFRLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDSCxPQUFPRixXQUFXYSxTQUFYLElBQXdCLDhCQUF1QmIsVUFBdkIsQ0FBaEMsRUFBb0VjLElBQXBFLENBQXlFQyxLQUF6RSxDQUErRWIsSUFBL0UsRUFBcUYsQ0FBQyxJQUFELEVBQU9jLE1BQVAsQ0FBY04sSUFBZCxDQUFyRixDQUFqQyxDQUFSLEVBQXFKTCxLQUE5SixHQUFzS0EsTUFBTVksU0FBTixHQUFrQixpQ0FBbUIsYUFBYSxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLE9BQVQsR0FBbUI7QUFDL1EsZ0JBQUlDLFFBQUosRUFBY0MsUUFBZDtBQUNBLG1CQUFPLHNCQUFvQkMsSUFBcEIsQ0FBeUIsU0FBU0MsUUFBVCxDQUFrQkMsUUFBbEIsRUFBNEI7QUFDeEQsdUJBQU8sQ0FBUCxFQUFVO0FBQ04sNEJBQVFBLFNBQVNDLElBQVQsR0FBZ0JELFNBQVNFLElBQWpDO0FBQ0ksNkJBQUssQ0FBTDtBQUNJTix1Q0FBVyx3QkFBU2YsTUFBTXNCLEtBQU4sQ0FBWUMsT0FBckIsQ0FBWDtBQUNBSixxQ0FBU0UsSUFBVCxHQUFnQixDQUFoQjtBQUNBLG1DQUFPLGNBQUtHLEdBQUwsQ0FBU0MsV0FBVCxFQUFQOztBQUVKLDZCQUFLLENBQUw7QUFDSVQsdUNBQVdHLFNBQVNPLElBQXBCO0FBQ0FQLHFDQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsbUNBQU9OLFNBQVNZLE9BQVQsQ0FBaUJDLGNBQWpCLENBQWdDNUIsTUFBTXNCLEtBQU4sQ0FBWU8sRUFBNUMsRUFBZ0RDLElBQWhELENBQXFEO0FBQ3hEQyxzQ0FBTWYsU0FBUyxDQUFUO0FBRGtELDZCQUFyRCxDQUFQOztBQUlKLDZCQUFLLENBQUw7QUFDQSw2QkFBSyxLQUFMO0FBQ0ksbUNBQU9HLFNBQVNhLElBQVQsRUFBUDtBQWZSO0FBaUJIO0FBQ0osYUFwQk0sRUFvQkpsQixPQXBCSSxFQW9CS2hCLE1BcEJMLENBQVA7QUFxQkgsU0F2QnNPLENBQWhDLENBQXhMLEVBdUJWRSxNQUFNaUMsV0FBTixHQUFvQixpQ0FBbUIsYUFBYSxzQkFBb0JwQixJQUFwQixDQUF5QixTQUFTcUIsUUFBVCxHQUFvQjtBQUNsRyxnQkFBSW5CLFFBQUosRUFBY0MsUUFBZDtBQUNBLG1CQUFPLHNCQUFvQkMsSUFBcEIsQ0FBeUIsU0FBU2tCLFNBQVQsQ0FBbUJDLFNBQW5CLEVBQThCO0FBQzFELHVCQUFPLENBQVAsRUFBVTtBQUNOLDRCQUFRQSxVQUFVaEIsSUFBVixHQUFpQmdCLFVBQVVmLElBQW5DO0FBQ0ksNkJBQUssQ0FBTDtBQUNJTix1Q0FBVyx3QkFBU2YsTUFBTXNCLEtBQU4sQ0FBWUMsT0FBckIsQ0FBWDtBQUNBYSxzQ0FBVWYsSUFBVixHQUFpQixDQUFqQjtBQUNBLG1DQUFPLGNBQUtHLEdBQUwsQ0FBU0MsV0FBVCxFQUFQOztBQUVKLDZCQUFLLENBQUw7QUFDSVQsdUNBQVdvQixVQUFVVixJQUFyQjtBQUNBVSxzQ0FBVWYsSUFBVixHQUFpQixDQUFqQjtBQUNBLG1DQUFPTixTQUFTWSxPQUFULENBQWlCVSxlQUFqQixDQUFpQ3JDLE1BQU1zQixLQUFOLENBQVlPLEVBQTdDLEVBQWlEQyxJQUFqRCxDQUFzRDtBQUN6REMsc0NBQU1mLFNBQVMsQ0FBVDtBQURtRCw2QkFBdEQsQ0FBUDs7QUFJSiw2QkFBSyxDQUFMO0FBQ0EsNkJBQUssS0FBTDtBQUNJLG1DQUFPb0IsVUFBVUosSUFBVixFQUFQO0FBZlI7QUFpQkg7QUFDSixhQXBCTSxFQW9CSkUsUUFwQkksRUFvQk1wQyxNQXBCTixDQUFQO0FBcUJILFNBdkJ3RCxDQUFoQyxDQXZCVixFQThDVkMsS0E5Q0UsR0E4Q00seUNBQTJCQyxLQUEzQixFQUFrQ0MsSUFBbEMsQ0E5Q2I7QUErQ0g7O0FBRUQsK0JBQWFOLFVBQWIsRUFBeUIsQ0FBQztBQUN0QjJDLGFBQUssUUFEaUI7QUFFdEJDLGVBQU8sU0FBU0MsTUFBVCxHQUFrQjtBQUNyQixnQkFBSUMsTUFBTSx1QkFBTUEsR0FBaEI7QUFBQSxnQkFDSUMsT0FBTyx1QkFBTUEsSUFEakI7QUFFQSxnQkFBSUMsU0FBUyxLQUFLckIsS0FBbEI7QUFBQSxnQkFDSU8sS0FBS2MsT0FBT2QsRUFEaEI7QUFBQSxnQkFFSWUsVUFBVUQsT0FBT0MsT0FGckI7QUFBQSxnQkFHSUMsaUJBQWlCRixPQUFPRSxjQUg1Qjs7QUFLQSxnQkFBSUMsa0JBQWtCRixRQUFRRyxhQUFSLEdBQXdCRixpQkFBaUIsQ0FBL0Q7O0FBRUEsbUJBQU8sZ0JBQU1HLGFBQU4sQ0FDSFAsR0FERyxFQUVILEVBQUVRLFVBQVVMLFFBQVFNLFFBQXBCLEVBQThCQyxVQUFVTCxtQkFBbUIsQ0FBQ0YsUUFBUU0sUUFBcEUsRUFBOEVFLFVBQVU7QUFDaEZDLDhCQUFVM0QsWUFEc0U7QUFFaEY0RCxnQ0FBWTtBQUZvRTtBQUF4RixhQUZHLEVBT0gsZ0JBQU1OLGFBQU4sQ0FDSU4sSUFESixFQUVJO0FBQ0lVLDBCQUFVO0FBQ05DLDhCQUFVM0QsWUFESjtBQUVONEQsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSXpCLEVBUkosQ0FQRyxFQWlCSCxnQkFBTW1CLGFBQU4sQ0FDSU4sSUFESixFQUVJO0FBQ0lVLDBCQUFVO0FBQ05DLDhCQUFVM0QsWUFESjtBQUVONEQsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSVYsUUFBUVcsV0FSWixDQWpCRyxFQTJCSCxnQkFBTVAsYUFBTixDQUNJTixJQURKLEVBRUk7QUFDSVUsMEJBQVU7QUFDTkMsOEJBQVUzRCxZQURKO0FBRU40RCxnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLGNBQUtFLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQmIsUUFBUUwsS0FBM0IsRUFBa0MsT0FBbEMsQ0FSSixDQTNCRyxFQXFDSCxnQkFBTVMsYUFBTixDQUNJTixJQURKLEVBRUk7QUFDSVUsMEJBQVU7QUFDTkMsOEJBQVUzRCxZQURKO0FBRU40RCxnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJVixRQUFRYyxTQVJaLENBckNHLEVBK0NILGdCQUFNVixhQUFOLENBQ0lOLElBREosRUFFSTtBQUNJVSwwQkFBVTtBQUNOQyw4QkFBVTNELFlBREo7QUFFTjRELGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUlWLFFBQVFHLGFBUlosRUFTSSxLQVRKLEVBVUlGLGNBVkosQ0EvQ0csRUEyREgsZ0JBQU1HLGFBQU4sQ0FDSU4sSUFESixFQUVJO0FBQ0lVLDBCQUFVO0FBQ05DLDhCQUFVM0QsWUFESjtBQUVONEQsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSVYsUUFBUU0sUUFBUixHQUFtQixJQUFuQixHQUEwQixnQkFBTUYsYUFBTiwwQkFFdEIsRUFBRVcsT0FBTyxPQUFULEVBQWtCQyxPQUFPLElBQXpCLEVBQStCQyxTQUFTLEtBQUtqRCxTQUE3QyxFQUF3RHdDLFVBQVU7QUFDMURDLDhCQUFVM0QsWUFEZ0Q7QUFFMUQ0RCxnQ0FBWTtBQUY4QztBQUFsRSxhQUZzQixFQU90QixTQVBzQixDQVI5QixDQTNERyxFQTZFSCxnQkFBTU4sYUFBTixDQUNJTixJQURKLEVBRUk7QUFDSVUsMEJBQVU7QUFDTkMsOEJBQVUzRCxZQURKO0FBRU40RCxnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJVixRQUFRTSxRQUFSLEdBQW1CLElBQW5CLEdBQTBCLGdCQUFNRixhQUFOLDBCQUV0QixFQUFFVyxPQUFPLE1BQVQsRUFBaUJDLE9BQU8sSUFBeEIsRUFBOEJDLFNBQVMsS0FBSzVCLFdBQTVDLEVBQXlEbUIsVUFBVTtBQUMzREMsOEJBQVUzRCxZQURpRDtBQUUzRDRELGdDQUFZO0FBRitDO0FBQW5FLGFBRnNCLEVBT3RCLFVBUHNCLENBUjlCLENBN0VHLENBQVA7QUFnR0g7QUE1R3FCLEtBQUQsQ0FBekI7O0FBK0dBLFdBQU8zRCxVQUFQO0FBQ0gsQ0FoTGdCLGtCQUFqQjs7a0JBa0xlQSxVIiwiZmlsZSI6InVua25vd24ifQ==